{"version":3,"sources":["img/level_icon.png","img/level_icon_disabled.png","img/bear_icon_brown.png","img/bear_icon.png","img/backbutton.png","views/levels/index.tsx","views/bears/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Levels","props","icons","appState","levels","map","l","state","key","number","className","to","width","alt","src","require","onClick","reset","Bears","history","useHistory","params","useParams","currentLevel","find","parseInt","level","height","nrOfBears","bear","push","foundBears","indexOf","style","margin","index","updateBear","length","completeLevel","renderContent","updateAppStateToLocalStorage","localStorage","setItem","JSON","stringify","createDefaultAppState","App","useState","getAppStateFromLocalStorage","storeState","getItem","parse","updateAppState","exact","path","foundLevel","filter","b","nextLevel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c693fd50.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/level_icon.d4d857fa.png\";","module.exports = __webpack_public_path__ + \"static/media/level_icon_disabled.be73be38.png\";","module.exports = __webpack_public_path__ + \"static/media/bear_icon_brown.12f81e1f.png\";","module.exports = __webpack_public_path__ + \"static/media/bear_icon.94e18797.png\";","module.exports = __webpack_public_path__ + \"static/media/backbutton.9443618a.png\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { AppState } from '../../App';\r\n\r\nconst Levels = (props: { appState: AppState, reset: () => void }) => {\r\n    const icons = props.appState.levels.map(l => {\r\n        if (l.state === 'active' || l.state === 'finished') {\r\n            return (<Link key={l.number} className=\"levelicon\" to={`/bears/${l.number}`}>\r\n                <img\r\n                    width=\"120px\"\r\n                    alt={'Level: ' + l.number}\r\n                    src={require('../../img/level_icon.png')}\r\n                />\r\n                <span className=\"text\">{l.number}</span>\r\n            </Link>)\r\n        } else {\r\n            return (\r\n                <div className=\"levelicon\" key={l.number}>\r\n                    <img\r\n                        width=\"120px\"\r\n                        alt={'Level: ' + l.number}\r\n                        src={require('../../img/level_icon_disabled.png')}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <header>\r\n                <h1>Levels</h1>\r\n            </header>\r\n            <main>\r\n                {\r\n                    icons\r\n                }\r\n                <button className=\"button\" onClick={() => props.reset()}>Begin opnieuw</button>\r\n            </main>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Levels;\r\n","import React from 'react';\r\nimport { Link, useParams, useHistory } from 'react-router-dom';\r\nimport { AppState, Level } from '../../App';\r\n\r\ninterface Props {\r\n    appState: AppState;\r\n    updateBear: (level: number, index: number) => void;\r\n    completeLevel: (level: number) => void;\r\n}\r\n\r\nconst Bears = (props: Props) => {\r\n    const history = useHistory();\r\n    const params = useParams<{ level: string }>();\r\n    const currentLevel = props.appState.levels.find(l => l.number === parseInt(params.level))\r\n\r\n    const renderContent = (level?: Level) => {\r\n        if (level) {\r\n            const onBearClicked = (index: number) => {\r\n                props.updateBear(level.number, index);\r\n            };\r\n\r\n            const completeLevel = (level: number) => {\r\n                props.completeLevel(level);\r\n                history.push('/');\r\n            }\r\n\r\n            const icons = [];\r\n            if (currentLevel) {\r\n                for (let bear = 1; bear <= currentLevel.nrOfBears; bear++) {\r\n                    icons.push(\r\n                        <img\r\n                            key={bear}\r\n                            width=\"70px\"\r\n                            alt={'Bear nummer: ' + bear}\r\n                            src={level.foundBears.indexOf(bear) !== -1 ? require('../../img/bear_icon_brown.png') : require('../../img/bear_icon.png')}\r\n                            style={{ margin: '20px' }}\r\n                            onClick={() => onBearClicked(bear)}\r\n                        />\r\n                    )\r\n                }\r\n            }\r\n\r\n            return (\r\n                <div>\r\n                    { icons }\r\n                    {   \r\n                        \r\n                        (level.nrOfBears === level.foundBears.length) ?\r\n                            <div className=\"bottombuttoncontainer\">\r\n                                <button className=\"button\" onClick={() => completeLevel(level.number)}>Volgende Level</button>\r\n                            </div>\r\n                             : null\r\n                    }\r\n                </div>\r\n            );\r\n        } else {\r\n            return (<div>Geen level gevonden</div>);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <header>\r\n                <Link to=\"/\">\r\n                    <img alt=\"terug\" className=\"backbutton\" height=\"30px\" src={require('../../img/backbutton.png')} />\r\n                </Link>\r\n                <h1>{`${currentLevel?.nrOfBears} Beren zoeken`}</h1>\r\n            </header>\r\n            <main>\r\n                {renderContent(currentLevel)}\r\n            </main>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Bears;\r\n","import React, { useState } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Levels from './views/levels';\nimport Bears from './views/bears';\nimport './App.css';\n\ntype LevelState = 'disabled' | 'active' | 'finished';\n\nexport interface Level {\n  number: number;\n  nrOfBears: number;\n  foundBears: Array<number>;\n  state: LevelState;\n}\nexport interface AppState {\n  levels: Array<Level>;\n}\n\nconst localStorageKey = 'berenjacht';\n\nconst getAppStateFromLocalStorage = (): AppState => {\n  const storeState = localStorage.getItem(localStorageKey) as string | null;\n  if (!storeState) {\n    const state = createDefaultAppState();\n    updateAppStateToLocalStorage(state);\n    return getAppStateFromLocalStorage();\n  } else {\n    return JSON.parse(storeState) as AppState;\n  }\n};\n\nconst updateAppStateToLocalStorage = (appState: AppState) => {\n  localStorage.setItem(localStorageKey, JSON.stringify(appState));\n};\n\nconst createDefaultAppState = (): AppState => {\n  const nrOfLevels = 50;\n  const state: AppState = {\n    levels: [],\n  };\n  for (let level = 1; level <= nrOfLevels; level++) {\n    state.levels.push({\n      number: level,\n      nrOfBears: 5 + ((level - 1) * 5),\n      foundBears: [],\n      state: (level === 1) ? 'active' : 'disabled',\n    });\n  }\n\n\n  return state;\n};\n\nfunction App() {\n  const [appState, updateAppState] = useState<AppState>(getAppStateFromLocalStorage())\n  const updateBear = (level: number, index: number) => {\n    const foundLevel = appState.levels.find(l => l.number === level);\n    if (foundLevel) {\n      if (foundLevel.foundBears.indexOf(index) !== -1) {\n        foundLevel.foundBears = [...foundLevel.foundBears.filter(b => b !== index)]\n      } else {\n        foundLevel.foundBears = [...foundLevel.foundBears, index];\n      }\n      updateAppState({\n        levels: [...appState.levels],\n      });\n      updateAppStateToLocalStorage(appState);\n    }\n  };\n\n  const completeLevel = (level: number) => {\n    const foundLevel = appState.levels.find(l => l.number === level);\n    const nextLevel = appState.levels.find(l => l.number === level + 1);\n    if (foundLevel && nextLevel) {\n      foundLevel.state = 'finished';\n      nextLevel.state = 'active';\n      updateAppState({\n        levels: [...appState.levels],\n      });\n      updateAppStateToLocalStorage(appState);\n    }\n  };\n\n  const reset = () => {\n    updateAppState(createDefaultAppState());\n    updateAppStateToLocalStorage(appState);\n  }\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Levels appState={appState} reset={reset} />\n          </Route>\n          <Route path=\"/bears/:level\">\n            <Bears\n              appState={appState}\n              updateBear={updateBear}\n              completeLevel={completeLevel}\n            />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}